!function( i ){
    "use strict";
    let t = !0 === /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test( navigator.userAgent ) ? "1" : "0", a = null;

    class e {
        constructor(){
            this.cbParallax = Cb_Parallax_Public, this.defaultOptions = {
                background_image_url : "",
                background_color : "",
                position_x : "center",
                position_y : "center",
                background_attachment : "fixed",
                can_parallax : "0",
                parallax_enabled : "0",
                direction : "vertical",
                vertical_scroll_direction : "top",
                horizontal_scroll_direction : "left",
                horizontal_alignment : "center",
                vertical_alignment : "center",
                overlay_image : "",
                image_width : i( window ).innerWidth(),
                image_height : i( window ).innerHeight(),
                overlay_path : "",
                overlay_opacity : "0.3",
                overlay_color : ""
            }, this.direction = void 0 !== this.cbParallax.image_options.direction ? this.cbParallax.image_options.direction : this.defaultOptions.direction, this.verticalScrollDirection = void 0 !== this.cbParallax.image_options.vertical_scroll_direction ? this.cbParallax.image_options.vertical_scroll_direction : this.defaultOptions.vertical_scroll_direction, this.horizontalScrollDirection = void 0 !== this.cbParallax.image_options.horizontal_scroll_direction ? this.cbParallax.image_options.horizontal_scroll_direction : this.defaultOptions.horizontal_scroll_direction, this.horizontalAlignment = void 0 !== this.cbParallax.image_options.horizontal_alignment ? this.cbParallax.image_options.horizontal_alignment : this.defaultOptions.horizontal_alignment, this.verticalAlignment = void 0 !== this.cbParallax.image_options.vertical_alignment ? this.cbParallax.image_options.vertical_alignment : this.defaultOptions.vertical_alignment, this.parallaxEnabled = void 0 !== this.cbParallax.plugin_options.parallax_enabled ? this.cbParallax.plugin_options.parallax_enabled : "0", this.allowOverride = void 0 !== this.cbParallax.plugin_options.allow_override ? this.cbParallax.plugin_options.allow_override : "0", this.disableOnMobile = void 0 !== this.cbParallax.plugin_options.disable_on_mobile ? this.cbParallax.plugin_options.disable_on_mobile : "0", this.canParallax = void 0 !== this.cbParallax.image_options.can_parallax ? this.cbParallax.image_options.can_parallax : "0", this.scrolling = { preserved : void 0 !== this.cbParallax.plugin_options.preserve_scrolling ? this.cbParallax.plugin_options.preserve_scrolling : "0" }, this.image = {
                src : void 0 !== this.cbParallax.image_options.background_image_url ? this.cbParallax.image_options.background_image_url : this.defaultOptions.background_image_url,
                backgroundColor : void 0 !== this.cbParallax.image_options.background_color ? this.cbParallax.image_options.background_color : this.defaultOptions.background_color,
                positionX : void 0 !== this.cbParallax.image_options.position_x ? this.cbParallax.image_options.position_x : this.defaultOptions.position_x,
                positionY : void 0 !== this.cbParallax.image_options.position_y ? this.cbParallax.image_options.position_y : this.defaultOptions.position_y,
                backgroundAttachment : void 0 !== this.cbParallax.image_options.background_attachment ? this.cbParallax.image_options.background_attachment : this.defaultOptions.background_attachment,
                backgroundRepeat : void 0 !== this.cbParallax.image_options.background_repeat ? this.cbParallax.image_options.background_repeat : this.defaultOptions.background_repeat,
                width : void 0 !== this.cbParallax.image_data.image_width ? this.cbParallax.image_data.image_width : this.defaultOptions.image_width,
                height : void 0 !== this.cbParallax.image_data.image_height ? this.cbParallax.image_data.image_height : this.defaultOptions.image_height
            }, this.overlay = {
                path : void 0 !== this.cbParallax.overlay_options.overlay_path ? this.cbParallax.overlay_options.overlay_path : this.defaultOptions.overlay_path,
                image : void 0 !== this.cbParallax.overlay_options.overlay_image ? this.cbParallax.overlay_options.overlay_image : this.defaultOptions.overlay_image,
                opacity : void 0 !== this.cbParallax.overlay_options.overlay_opacity ? this.cbParallax.overlay_options.overlay_opacity : this.defaultOptions.overlay_opacity,
                color : void 0 !== this.cbParallax.overlay_options.overlay_color ? this.cbParallax.overlay_options.overlay_color : this.defaultOptions.overlay_color
            }, this.body = i( "body" ), this.html = i( "html" ), this.window = i( window ), this.imageAspectRatio = this.getBackgroundImageAspectRatio(), this.context = null, this.canvas = null, this.canvasElement = null, this.img = null, this.canvas = null, this.parallaxfactor = 1.2, a = this
        }

        init(){
            e.imports = { polyfill : polyfill }, e.imports = { requestAnimationFrame : requestAnimationFrame }, window.__forceSmoothScrollPolyfill__ = !0, polyfill(), this.initBackground(), this.addEvents()
        }

        initBackground(){
            if ( "parallax" === this.getBackgroundMode() ){
                this.setupCanvas();
                let i = this;
                window.onload = function(){
                    let t = i.getCanvasDimensions();
                    i.canvas = document.getElementById( "cb_parallax_canvas" ), i.context = i.canvas.getContext( "2d" ), i.img = new Image, i.img.onload = function(){
                        i.context.drawImage( this, 0, 0, t.x, t.y ), i.initParallaxBackgroundImage()
                    }, i.img.src = i.image.src
                }
            } else this.initStaticBackgroundImage()
        }

        getBackgroundMode(){
            let i = "static";
            return "1" === this.parallaxEnabled && "1" === this.canParallax && ( i = "parallax" ), "1" === t && "1" === this.disableOnMobile && ( i = "static" ), i
        }

        addEvents(){
            "1" === this.canParallax && "1" === this.parallaxEnabled ? ( this.window.on( "scroll", { context : this }, this.parallaxOnScroll ), this.window.on( "resize", { context : this }, this.parallaxOnResize ) ) : this.window.on( "resize", { context : this }, this.staticBackgroundImageOnResize )
        }

        initParallaxBackgroundImage(){
            this.setupOverlay(), this.addCss(), this.updateCanvasAlignment(), this.updateParallaxAxis(), this.doParallaxTranslate3DTransform( this.getParallaxTransform() )
        }

        setupCanvas(){
            let t = this.getCanvasDimensions();
            this.body.prepend( '<canvas id="cb_parallax_canvas" class="custom-background" width="' + t.x + '" height="' + t.y + '" style="background-color: ' + this.image.backgroundColor + '"></canvas>' ), this.canvasElement = i( "#cb_parallax_canvas" )
        }

        setupOverlay(){
            this.body.prepend( '<div id="cb_parallax_overlay"></div>' ), this.overlayContainer = i( "#cb_parallax_overlay" ), "0.0" !== this.overlay.opacity && "none" !== this.overlay.opacity && this.overlayContainer.css( { opacity : this.overlay.opacity } ), "" !== this.overlay.color && this.overlayContainer.css( { "background-color" : this.overlay.color } ), "none" !== this.overlay.image && this.overlayContainer.css( { background : "url(" + this.overlay.path + this.overlay.image + ")" } )
        }

        parallaxOnScroll( i ){
            let t = this;
            void 0 !== i && ( t = i.data.context ), t.isScrolling = "1", requestAnimationFrame( e.scrollParallaxBackgroundImage )
        }

        static scrollParallaxBackgroundImage(){
            "1" === a.isScrolling && a.doParallaxTranslate3DTransform( a.getParallaxTransform() ), a.isScrolling = "0", requestAnimationFrame( e.scrollParallaxBackgroundImage )
        }

        parallaxOnResize( i ){
            let t = this;
            void 0 !== i && ( t = i.data.context ), t.isResizing = "1", requestAnimationFrame( e.resizeParallaxBackgroundImage )
        }

        static resizeParallaxBackgroundImage(){
            "1" === a.isResizing && ( a.updateCanvasDimensions(), a.updateCanvasAlignment(), a.doParallaxTranslate3DTransform( a.getParallaxTransform() ), a.updateParallaxAxis() ), a.isResizing = "0", requestAnimationFrame( e.resizeParallaxBackgroundImage )
        }

        getBackgroundImageHorizontalAlignment(){
            let t = null, a = this.getCanvasDimensions(), o = e.getViewportAspectRatio(), n = o >= this.imageAspectRatio ? "1" : "0",
                r = o < this.imageAspectRatio ? "1" : "0";
            if ( "vertical" === this.direction ) if ( "to top" === this.verticalScrollDirection ){
                if ( "1" === n ){
                    switch ( this.horizontalAlignment ){
                        case"left":
                            t = "0";
                            break;
                        case"center":
                            t = i( window ).innerWidth() / 2 - a.x / 2;
                            break;
                        case"right":
                            t = i( window ).innerWidth() - a.x
                    }
                    return parseInt( t ) + "px"
                }
                if ( "1" === r ){
                    switch ( this.horizontalAlignment ){
                        case"left":
                            t = "0";
                            break;
                        case"center":
                            t = i( window ).innerWidth() / 2 - a.x / 2;
                            break;
                        case"right":
                            t = i( window ).innerWidth() - a.x
                    }
                    return parseInt( t ) + "px"
                }
            } else if ( "to bottom" === this.verticalScrollDirection ){
                if ( "1" === n ){
                    switch ( this.horizontalAlignment ){
                        case"left":
                            t = "0";
                            break;
                        case"center":
                            t = i( window ).innerWidth() / 2 - a.x / 2;
                            break;
                        case"right":
                            t = i( window ).innerWidth() - a.x
                    }
                    return parseInt( t ) + "px"
                }
                if ( "1" === r ){
                    switch ( this.horizontalAlignment ){
                        case"left":
                            t = "0";
                            break;
                        case"center":
                            t = i( window ).innerWidth() / 2 - a.x / 2;
                            break;
                        case"right":
                            t = i( window ).innerWidth() - a.x
                    }
                    return parseInt( t ) + "px"
                }
            }
        }

        updateCanvasAlignment(){
            "vertical" === this.direction ? this.canvasElement.css( { left : this.getBackgroundImageHorizontalAlignment() } ) : "horizontal" === this.direction && this.canvasElement.css( { top : this.getBackgroundImageVerticalAlignment() } )
        }

        getBackgroundImageVerticalAlignment(){
            let t = null, a = this.getCanvasDimensions(), o = e.getViewportAspectRatio(), n = o >= this.imageAspectRatio ? "1" : "0",
                r = o < this.imageAspectRatio ? "1" : "0";
            if ( "horizontal" === this.direction ) if ( "to the left" === this.horizontalScrollDirection ){
                if ( "1" === n ){
                    switch ( this.verticalAlignment ){
                        case"top":
                            t = "0";
                            break;
                        case"center":
                            t = i( window ).innerHeight() / 2 - a.y / 2;
                            break;
                        case"bottom":
                            t = i( window ).innerHeight() - a.y
                    }
                    return parseInt( t ) + "px"
                }
                if ( "1" === r ){
                    switch ( this.verticalAlignment ){
                        case"top":
                            t = "0";
                            break;
                        case"center":
                            t = i( window ).innerHeight() / 2 - a.y / 2;
                            break;
                        case"bottom":
                            t = -i( window ).innerHeight() + a.y
                    }
                    return parseInt( t ) + "px"
                }
            } else if ( "to the right" === this.horizontalScrollDirection ){
                if ( "1" === n ){
                    switch ( this.verticalAlignment ){
                        case"top":
                            t = "0";
                            break;
                        case"center":
                            t = i( window ).innerHeight() / 2 - a.y / 2;
                            break;
                        case"bottom":
                            t = i( window ).innerHeight() - a.y
                    }
                    return parseInt( t ) + "px"
                }
                if ( "1" === r ){
                    switch ( this.verticalAlignment ){
                        case"top":
                            t = "0";
                            break;
                        case"center":
                            t = i( window ).innerHeight() / 2 - a.y / 2;
                            break;
                        case"bottom":
                            t = i( window ).innerHeight() - a.y
                    }
                    return parseInt( t ) + "px"
                }
            }
        }

        updateParallaxAxis(){
            "vertical" === this.direction ? "to bottom" === this.verticalScrollDirection && this.canvasElement.css( {
                position : "fixed",
                top : this.getBackgroundImageVerticalPositionInPx()
            } ) : "horizontal" === this.direction && this.canvasElement.css( {
                position : "fixed",
                left : this.getBackgroundImageHorizontalPositionInPx()
            } )
        }

        getParallaxTransform(){
            let t = { x : null, y : null }, a = this.getParallaxScrollRatio(), e = i( window ).scrollTop();
            return "vertical" === this.direction ? "to top" === this.verticalScrollDirection ? ( t.x = 0, t.y = -e * a ) : "to bottom" === this.verticalScrollDirection && ( t.x = 0, t.y = e * a ) : "horizontal" === this.direction && ( "to the left" === this.horizontalScrollDirection ? ( t.x = -e * a, t.y = 0 ) : "to the right" === this.horizontalScrollDirection && ( t.x = e * a, t.y = 0 ) ), t
        }

        getParallaxScrollRatio(){
            let t = this.getCanvasDimensions(), a = null, e = null, o = null, n = null;
            return "vertical" === this.direction ? ( a = i( document ).innerHeight() - i( window ).innerHeight(), n = ( e = t.y - i( window ).height() ) / a ) : "horizontal" === this.direction && ( a = i( document ).innerHeight() - i( window ).innerHeight(), n = ( o = t.x - i( window ).innerWidth() ) / a ), n
        }

        doParallaxTranslate3DTransform( i ){
            this.canvasElement.css( {
                "-webkit-transform" : "translate3d(" + i.x + "px, " + i.y + "px, 0px)",
                "-moz-transform" : "translate3d(" + i.x + "px, " + i.y + "px, 0px)",
                "-ms-transform" : "translate3d(" + i.x + "px, " + i.y + "px, 0px)",
                "-o-transform" : "translate3d(" + i.x + "px, " + i.y + "px, 0px)",
                transform : "translate3d(" + i.x + "px, " + i.y + "px, 0px)"
            } )
        }

        static getViewportDimensions(){
            return { height : i( window ).innerHeight(), width : i( window ).innerWidth() }
        }

        getCanvasDimensions(){
            let i = this.window.innerWidth() / this.window.innerHeight(), t = this.image.width / this.image.height, a = 0, e = 0;
            return "vertical" === this.direction ? t < i ? ( a = ( e = this.window.innerWidth() ) / this.image.width * this.image.height, {
                x : e.toFixed( 0 ),
                y : a.toFixed( 0 )
            } ) : {
                x : ( e = ( a = this.window.innerHeight() * this.parallaxfactor ) / this.image.height * this.image.width ).toFixed( 0 ),
                y : a.toFixed( 0 )
            } : "horizontal" === this.direction ? t < i ? ( a = ( e = this.window.innerWidth() * this.parallaxfactor ) / this.image.width * this.image.height, {
                x : e.toFixed( 0 ),
                y : a.toFixed( 0 )
            } ) : { x : ( e = ( a = this.window.innerHeight() ) / this.image.height * this.image.width ).toFixed( 0 ), y : a.toFixed( 0 ) } : void 0
        }

        updateCanvasDimensions(){
            let i = this.getCanvasDimensions();
            this.canvasElement.width( parseInt( i.x ) ), this.canvasElement.height( parseInt( i.y ) )
        }

        initStaticBackgroundImage(){
            this.setupOverlay(), this.addCss(), this.setupStaticBackgroundImageContainer()
        }

        setupStaticBackgroundImageContainer(){
            let i = this.getStaticBackgroundImageDimensions();
            this.body.css( {
                background : "url(" + this.image.src + ")",
                "background-size" : i.width + "px " + i.height + "px",
                "background-position" : this.image.positionX + " " + this.image.positionY,
                "background-attachment" : this.image.backgroundAttachment,
                "background-repeat" : this.image.backgroundRepeat
            } )
        }

        staticBackgroundImageOnResize( i ){
            let t = this;
            void 0 !== i && ( t = i.data.context ), t.isResizing = "1", requestAnimationFrame( e.updateStaticBackgroundImageAlignment )
        }

        static updateStaticBackgroundImageAlignment(){
            "1" === a.isResizing && a.updateStaticBackgroundImageDimensions(), a.isResizing = "0", requestAnimationFrame( e.updateStaticBackgroundImageAlignment )
        }

        updateStaticBackgroundImageDimensions(){
            let i = this.getStaticBackgroundImageDimensions();
            this.body.css( { "background-size" : i.width + "px " + i.height + "px" } )
        }

        getStaticBackgroundImageDimensions(){
            let i = e.getViewportDimensions(), t = {};
            return e.getViewportAspectRatio() >= this.imageAspectRatio ? ( t.width = i.width, t.height = t.width / this.imageAspectRatio, t ) : ( t.height = i.height, t.width = t.height * this.imageAspectRatio, t )
        }

        addCss(){
            this.body.removeClass( "custom-background" ), this.body.removeProp( "background-image" )
        }

        getBackgroundImageHorizontalPositionInPx(){
            let t = null, a = this.getCanvasDimensions();
            return "to the left" === this.horizontalScrollDirection ? ( t = "0", parseInt( t ) + "px" ) : "to the right" === this.horizontalScrollDirection ? ( t = i( window ).innerWidth() - a.x, parseInt( t ) + "px" ) : void 0
        }

        getBackgroundImageVerticalPositionInPx(){
            let t = null, a = this.getCanvasDimensions();
            return "to top" === this.verticalScrollDirection ? ( t = "0", parseInt( t ) + "px" ) : "to bottom" === this.verticalScrollDirection ? ( t = i( window ).innerHeight() - a.y, parseInt( t ) + "px" ) : void 0
        }

        getBackgroundImageAspectRatio(){
            return this.image.width / this.image.height
        }

        static getViewportAspectRatio(){
            return i( window ).innerWidth() / i( window ).innerHeight()
        }
    }

    i( document ).one( "ready", function(){
        ( new e ).init()
    } )
}( jQuery );
